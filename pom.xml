<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.github.ryankenney</groupId>
	<artifactId>maven-github-release-demo</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>maven-github-release-demo</name>
	<description>A demo project for tagging/posting github from maven projects</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- github server corresponds to entry in ~/.m2/settings.xml -->
		<github.global.server>github</github.global.server>
	</properties>

	<!-- TODO: Try move to variables -->
	<scm>
		<connection>scm:git:git@github.com:ryankenney/maven-github-release-demo.git</connection>
		<developerConnection>scm:git:git@github.com:ryankenney/maven-github-release-demo.git</developerConnection>
		<url>https://github.com/ryankenney/maven-github-release-demo/tree/${project.scm.tag}</url>
		<tag>master</tag>
	</scm>

	<distributionManagement>
		<repository>
			<id>internal.repo</id>
			<name>Temporary Staging Repository</name>
			<url>file://${project.build.directory}/mvn-repo</url>
		</repository>
	</distributionManagement>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<!-- TODO: Make variable -->
					<!--  -->
					<!-- 
						Deploy sites files (jars for maven) to a directory on disk
						
						NOTE: We're writing releases and snapshots to different directories,
						then including only releases in the github plugin config that follows. This prevents
						snapshots from ending up in the github repo. If you want both snapshots
						and releases in the repo, replace the following two entries with a single
						"altDeploymentRepository" path, and then point "site-maven-plugin"
						at the single path.
					-->
					<altReleaseDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo/releases</altReleaseDeploymentRepository>
					<altSnapshotDeploymentRepository>internal.repo::default::file://${project.build.directory}/mvn-repo/snapshots</altSnapshotDeploymentRepository>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.github.github</groupId>
				<artifactId>site-maven-plugin</artifactId>
				<version>0.12</version>
				<configuration>
					<!-- merge new artifacts with existing repo (always true if we're pushing a maven repo) -->
					<merge>true</merge>
					<!-- git commit message -->
					<message>Maven artifacts for ${project.version}</message>
					<!-- disable webpage processing -->
					<noJekyll>true</noJekyll>
					<!-- local directory to publish -->
					<!--
						NOTE: We only publish releases in this example.
						Snapshots will fail with error if attempted.
						See notes in "maven-deploy-plugin" above.
					-->
					<outputDirectory>${project.build.directory}/mvn-repo/releases</outputDirectory>
					<!-- remote branch name -->
					<branch>refs/heads/mvn-repo</branch>
					<includes>
						<include>**/*</include>
					</includes>
					<!-- TODO: Make variables -->
					<!-- github repo name -->
					<repositoryName>maven-github-release-demo</repositoryName>
					<!-- github username -->
					<repositoryOwner>ryankenney</repositoryOwner>
				</configuration>
				<executions>
					<!-- run site-maven-plugin's 'site' target as part of the build's normal 'deploy' phase -->
					<execution>
						<goals>
							<goal>site</goal>
						</goals>
						<phase>deploy</phase>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
